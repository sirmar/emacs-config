#+TITLE: Emacs configuration
#+AUTHOR: Marcus Veibäck
#+EMAIL: sirmar@gmail

* Performance
#+BEGIN_SRC emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
      (format "%.2f seconds"
        (float-time
        (time-subtract after-init-time before-init-time)))
      gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC

* Package handling

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)

  (use-package diminish)
  (use-package bind-key)
#+END_SRC

* Built in
** The interface

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq display-time-24hr-format t)
  (display-time-mode 1)

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")

  (setq ring-bell-function 'ignore)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq frame-title-format "%b")
  (when window-system (set-frame-position (selected-frame) 10 30))
  (when window-system (set-frame-size (selected-frame) 360 83))

  (delete-selection-mode)
  (setq mouse-yank-at-point t)

  (global-hl-line-mode 1)
  (line-number-mode t)
  (column-number-mode t)

  (setq redisplay-dont-pause t
        scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)

  (eval-after-load "term"
    '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))

  (setq user-full-name "Marcus Veibäck")
  (setq user-mail-address "sirmar@gmail.com")
#+END_SRC

** Backup files

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

** Modes

#+BEGIN_SRC emacs-lisp
  (global-whitespace-mode t)
  (diminish 'global-whitespace-mode)
  (add-hook 'text-mode-hook (lambda () (setq whitespace-style '(face tabs trailing))))
  (add-hook 'prog-mode-hook (lambda () (setq whitespace-style '(face tabs trailing))))
  (add-hook 'go-mode-hook (lambda () (setq whitespace-style '(face trailing))))

  (electric-pair-mode 1)
  (show-paren-mode 1)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+END_SRC

** Hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-d" . dired-jump))
    :config
    (progn
      (define-key dired-mode-map "." 'dired-single-up-directory)
      (setq dired-listing-switches "-alGhvF --group-directories-first")))

  (use-package dired-single)

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (define-key dired-mode-map "H" 'dired-hide-dotfiles-mode))

  (defun my-dired-init ()
    (define-key dired-mode-map [remap dired-find-file]
      'dired-single-buffer)
    (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
      'dired-single-buffer-mouse)
    (define-key dired-mode-map [remap dired-up-directory]
      'dired-single-up-directory))

  (if (boundp 'dired-mode-map)
      (my-dired-init)
    (add-hook 'dired-load-hook 'my-dired-init))

#+END_SRC

* Interface
** Theme

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :init (load-theme 'zenburn t)
    :config (set-face-attribute 'region nil :background "#522"))
#+END_SRC

** Fill comlumn indicator

#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :hook (prog-mode . fci-mode)
    :config (setq fci-rule-column 120))

  (defadvice popup-create (before suppress-fci-mode activate)
    (turn-off-fci-mode))

  (defadvice popup-delete (after restore-fci-mode activate)
    (turn-on-fci-mode))
#+END_SRC

** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Dashboard

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((projects . 10)
                            (recents  . 10))))
#+END_SRC

* Editing
** Multiple cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind (("C-+" . mc/mark-next-like-this)
           ("C-M-+" . mc/mark-all-like-this)
           ("C-´" . mc/edit-lines)))
#+END_SRC

** Move text

#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :bind ( ("<M-up>"   . move-text-up)
            ("<M-down>" . move-text-down)))
#+END_SRC
** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish (company-mode)
    :init (global-company-mode t)
    :config
      (setq company-idle-delay 0)
      (company-tng-configure-default))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC

** Expand region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("M-SPC" . er/expand-region)))
#+END_SRC

** WGrep

#+BEGIN_SRC emacs-lisp
  (use-package wgrep)
#+END_SRC

** Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init (yas-global-mode 1)
    :diminish yas-minor-mode)
#+END_SRC

* Search

** Swiper

#+BEGIN_SRC emacs-lisp
  (use-package smex)
  (use-package flx)

  (use-package ivy
    :diminish (ivy-mode)
    :init (setq magit-completing-read-function 'ivy-completing-read
                ivy-height 25)
    :config (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :diminish (counsel-mode)
    :config
    (counsel-mode)
    (setq counsel-grep-base-command
          "rg -i -M 120 --no-heading --line-number --color never '%s' %s"))

  (use-package swiper
    :bind (("C-s" . counsel-grep-or-swiper)))
#+END_SRC

** Avy

#+BEGIN_SRC emacs-lisp
    (use-package avy
      :init (avy-setup-default)
      :bind (("C-r" . avy-goto-char-timer))
      :config (setq avy-timeout-seconds 0.3))
#+END_SRC

** Ace Window

#+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :bind (("M-o" . ace-window))
      :config (custom-set-faces '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 2.0))))))
#+END_SRC

* Major modes

** Dockerfile mode

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :commands (dockerfile-mode)
    :mode (("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC

** Yaml mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :commands (yaml-mode)
    :mode (("\\.yml\\'" . yaml-mode)))
#+END_SRC

** Markdown mode

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode))
#+END_SRC

** PHP mode

#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :commands (php-mode))
#+END_SRC

** Go mode

#+BEGIN_SRC emacs-lisp
  (defun lsp-go-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (use-package go-mode
    :commands (go-mode)
    :hook
       (go-mode . lsp)
       (go-mode . lsp-go-save-hooks))
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c c" . org-capture))
    :init
    (setq org-default-notes-file "~/notes.org")
    (setq org-todo-keywords '((sequence "TODO" "DOING" "DONE")))
    (setq org-todo-keyword-faces '(("TODO" . "red") ("DOING" . "Orange") ("DONE" . "green")))
    (setq org-log-done "time")
    (setq org-src-fontify-natively t)
    (setq org-ellipsis " ⤵")
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window)
    (setq org-capture-templates
          '(("r" "Refactor me" entry
             (file+headline org-default-notes-file "Code")
             "* TODO %?\nADDED: %U\nLINK: %l"
             :empty-lines 1)

            ("t" "Add TODO item" entry
             (file+headline org-default-notes-file "Todos")
             "* TODO %?\nADDED: %U"
             :empty-lines 1)

            ("f" "Add Question" entry
             (file+headline org-default-notes-file "Questions")
             "* TODO (Q): %??\n(A):\nADDED: %U"
             :empty-lines 1)

            ("n" "Add Note" entry
             (file+headline org-default-notes-file "Notes")
             "* %?\nADDED: %U"
             :empty-lines 1)))
    (add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")))

  (use-package org-bullets
    :hook (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

* Global key changes
** Custom functions

#+BEGIN_SRC emacs-lisp
   (defun marcus-kill-line-or-region ()
     "Cut region. If no region cut current line."
     (interactive)
     (if (use-region-p) (kill-region (region-beginning) (region-end))
       (kill-whole-line)))

   (defun marcus-home ()
     "Move to indentation, beginning of line and beginning of buffer."
     (interactive)
     (if (bolp) (beginning-of-buffer)
       (skip-chars-backward " \t")
       (unless (bolp) (back-to-indentation))))


   (defun marcus-end ()
     "Move to end of line and end of buffer."
     (interactive)
     (if (eolp) (end-of-buffer)
       (end-of-line)))

   (defun marcus-delete-current-buffer-file ()
     "Removes file connected to current buffer and kills buffer."
     (interactive)
     (let ((filename (buffer-file-name))
           (buffer (current-buffer))
           (name (buffer-name)))
       (if (not (and filename (file-exists-p filename)))
           (ido-kill-buffer)
         (when (yes-or-no-p "Are you sure you want to remove this file? ")
           (delete-file filename)
           (kill-buffer buffer)
           (message "File '%s' successfully removed" filename)))))

   (defun marcus-rename-current-buffer-file ()
     "Renames current buffer and file it is visiting."
     (interactive)
     (let ((name (buffer-name))
           (filename (buffer-file-name)))
       (if (not (and filename (file-exists-p filename)))
           (error "Buffer '%s' is not visiting a file!" name)
         (let ((new-name (read-file-name "New name: " filename)))
           (if (get-buffer new-name)
               (error "A buffer named '%s' already exists!" new-name)
             (rename-file filename new-name 1)
             (rename-buffer new-name)
             (set-visited-file-name new-name)
             (set-buffer-modified-p nil)
             (message "File '%s' successfully renamed to '%s'"
                      name (file-name-nondirectory new-name)))))))

   (defun marcus-comment ()
     "Commend eclipce style"
         (interactive)
         (let ((start (line-beginning-position))
               (end (line-end-position)))
           (when (region-active-p)
             (setq start (save-excursion
                           (goto-char (region-beginning))
                           (beginning-of-line)
                           (point))
                   end (save-excursion
                         (goto-char (region-end))
                         (end-of-line)
                         (point))))
           (comment-or-uncomment-region start end)))

  (defun marcus-goto-last-edit-point ()
   "Sets the cursor on the last edit point."
   (interactive)
   (let ((undos buffer-undo-list))
     (if (listp undos)
         (while (and undos
                     (let ((pos (or (cdr-safe (car undos)) (car undos))))
                       (not (and (integerp pos) (goto-char (abs pos))))))
           (setq undos (cdr undos))))))
#+END_SRC

** Bindings

#+BEGIN_SRC emacs-lisp
  (bind-key "C-z" 'undo)
  (bind-key "C-x C-z" 'undo)
  (bind-key "<delete>" 'delete-char)
  (bind-key "C-j" (lambda () (interactive) (join-line -1)))
  (bind-key "C-w" 'marcus-kill-line-or-region)
  (bind-key "C-a" 'marcus-home)
  (bind-key "C-e" 'marcus-end)
  (bind-key "M-g" 'goto-line)
  (bind-key "C-x C-k" 'marcus-delete-current-buffer-file)
  (bind-key "C-x C-r" 'marcus-rename-current-buffer-file)
  (bind-key "C-x C-b" 'ibuffer)
  (bind-key "M-C-c" 'marcus-comment)
  (bind-key "M-C-SPC" 'marcus-goto-last-edit-point)
  (bind-key "S-SPC" 'cycle-spacing)
  (bind-key "C-c s" '(lambda ()  (interactive) (ansi-term "/bin/bash")))
  (bind-key "<f10>" 'next-match)
#+END_SRC

* Projects

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :init (counsel-projectile-mode)
    :config (setq projectile-mode-line '(:eval (format " P[%s]" (projectile-project-name))))
            (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    :bind (("C-c g" . counsel-projectile-rg)))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind (("C-x g" . magit-status)))
#+END_SRC

** Lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
      (setq lsp-keymap-prefix "C-c l")
      (setq read-process-output-max (* 1024 1024)) ;; 1mb
    :hook
       (lsp-mode . lsp-enable-which-key-integration)
    :commands lsp)

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

  (use-package all-the-icons)
#+END_SRC

* Help

** Key stroke help

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish (which-key-mode)
    :init (which-key-mode))
#+END_SRC

** Discover

#+BEGIN_SRC emacs-lisp
  (use-package discover
    :init (global-discover-mode 1))
#+END_SRC
