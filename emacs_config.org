#+TITLE: Emacs configuration using Org mode
#+AUTHOR: Marcus Veibäck
#+EMAIL: sirmar@gmail

#+OPTIONS: toc:2 tags:nil todo:nil
#+TAGS: add bug doc explore package practice refactor remove setting

#+BEGIN_COMMENT Tag descriptions
+ add - Add new functionality to the configuration.
+ bug - Something in the Emacs configuration are not working as intended.
+ doc - Changes to the structure or content of the documentation.
+ explore - Find out what out there.
+ package - Add a new package to the configuration.
+ practice - Try using a specific command or feature to learn it.
+ setting - Change settings or add content features already there.
+ refactor - Make the lisp code prettier without changing anything else.
+ remove - Remove something from the configuration.
#+END_COMMENT

* Introduction
Two things happened at the same time. I learned about the existence
of org mode and I found new inspiration to play around with my Emacs
configuration. I figured, why not combine the two as a way to learn
org mode and to find out what is out there in terms of helpful tools
to use in my setup. This is the result so far.

The intention is that all packages needed will be downloaded and
compiled automatically the first time you start Emacs with this
configuration. This has been verified on Mac and Windows with
Emacs version 24.4.1.

There are some dependencies external to Emacs. Instructions on how
to get them can be found in the following chapter.

This configuration is work in progress. Always. Feel free to steal
anything you find useful.

--- Marcus Veibäck ([[mailto:sirmar@gmail.com][sirmar@gmail.com]])

* Dependencies
This configuration has some external dependencies that need to be installed
in order for everything to work. So far, I have only tried it on OS X, so
there are currently no instructions for other operating systems.

** Mac
*** Homebrew
Homepage: [[http://brew.sh]]

Download and install Homebrew. Instructions can be found on the website above.

*** Aspell
Homepage: [[http://aspell.net]]

Install the spell checker Aspell using brew.

#+BEGIN_SRC sh
  brew install aspell --with-lang-en
#+END_SRC

*** Virtualenv
Homepage: [[http://docs.python-guide.org/en/latest/dev/virtualenvs/]]

Install python virtual environment using pip.

#+BEGIN_SRC sh
  pip install virtualenv
#+END_SRC

*** Flycheck backends
Homepage: [[https://github.com/nodeca/js-yaml]]
Homepage: [[http://jshint.com]]
Homepage: [[http://coffeescript.org]]
Homepage: [[http://www.coffeelint.org]]
Homepage: [[http://www.pylint.org]]

Used for fly-checking. Install using npm:

#+BEGIN_SRC sh
  npm install -g js-yaml coffee-script coffeelint jshint
  pip install pylint
#+END_SRC

* Emacs configuration
The configuration itself is devided in several sections. Above every block
of Elisp code there are a brief explanation expressing the intention of
the code.

** Starting Emacs
*** Cleaning up the interface
The Emacs window should be as clean as possible. Therefor the
menu bar, the tool bar and the scroll bar are removed.

Also I want the buffers to be clean, so start up message and
scratch buffer message are both removed.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC

*** The Emacs frame
I prefer my Emacs to use most of the screen. Here the position and
size of the program window are set.

#+BEGIN_SRC emacs-lisp
  (when window-system (set-frame-position (selected-frame) 10 30))

  (if (> (display-pixel-width) 1500)
      (when window-system (set-frame-size (selected-frame) 360 83))
      (when window-system (set-frame-size (selected-frame) 200 83)))
#+END_SRC

Create the my standard configuration of windows.

#+BEGIN_SRC emacs-lisp
  (defun config-buffers ()
    (setq first-window (selected-window))
    (if (> (display-pixel-width) 1500)
      (progn
        (setq third-window (split-window first-window 260 t))
        (setq second-window (split-window first-window 160 t))
        (generate-new-buffer "*grep*")
        (set-window-buffer third-window "*grep*"))
      (progn
        (setq third-window (split-window first-window 115 t)))))

  (config-buffers)
#+END_SRC

Frame title is set to the current buffer name.

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "%b")
#+END_SRC

** Packages
*** Built in package system
Initialize and add the package archive for Melpa. Set proxy if needed. Refresh
package content if needed.

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

  ;; (package-refresh-contents)

  ;; (setq url-proxy-services
  ;;   '( ("no_proxy" . "work\\.com")
  ;;      ("http" . "proxy1071.scansafe.net:8080")))
#+END_SRC

*** Use package
Homepage: [[https://github.com/jwiegley/use-package]]

I use "Use package" to ensure that all my packages are downloaded and
installed if missing at start up. Also, it offers a neat way to define
keys and initialize packages.

Here "Use package" is installed the first time Emacs is started
on a new computer.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

*** Auto compile
Homepage: [[https://github.com/tarsius/auto-compile]]

This package makes sure that byte compiled files are recompiled when
the source has changed. Dash is a dependency to auto compile that is
missing in.

#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t)

  (use-package auto-compile
    :ensure t
    :init
    (progn
      (auto-compile-on-load-mode)
      (setq load-prefer-newer t)))
#+END_SRC

** Text manipulation
*** Indentation
Setting lisp indentation to two spaces.

#+BEGIN_SRC emacs-lisp
  (setq lisp-indent-offset 2)
#+END_SRC

A small utility function that indents the whole buffer.

#+BEGIN_SRC emacs-lisp
  (defun marcus-indent-buffer ()
    "Indents whole buffer."
    (interactive)
    (indent-region (point-min) (point-max) nil))
#+END_SRC

*** Cut, copy and paste
Make sure that active regions are deleted if I start writing. Also
insert at Emacs cursor and not mouse cursor when pasting into buffer
with the mouse.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode)
  (setq mouse-yank-at-point t)
#+END_SRC

Make C-w context aware and remove the whole current line if
no region is active. Otherwise let it work just as before.

#+BEGIN_SRC emacs-lisp
  (defun kill-line-or-region ()
    "Cut region. If no region cut current line."
    (interactive)
    (if (use-region-p) (kill-region (region-beginning) (region-end))
      (kill-whole-line)))

  (bind-key "C-w" 'kill-line-or-region)
#+END_SRC

Bind key to remove a balanced expression, i.e from
the current ending parenthesis back to the starting one.

#+BEGIN_SRC emacs-lisp
  (bind-key "M-C-<backspace>" 'sp-backward-kill-sexp)
#+END_SRC

*** Multiple cursors
Homepage: [[https://github.com/magnars/multiple-cursors.el]]

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind ( ("C-ä" . mc/mark-next-symbol-like-this)
            ("C-ö" . mc/mark-previous-symbol-like-this)
            ("C-å" . mc/mark-all-symbols-like-this)
            ("C-'" . mc/edit-lines)))
#+END_SRC

*** Change inner
Homepage: [[https://github.com/emacsmirror/change-inner]]

While inside a pair like parentheses, quotation marks and the like,
inner will remove everything inside excluding the pair, while outer will
remove everything inside including the pair itself.

#+BEGIN_SRC emacs-lisp
  (use-package change-inner
    :ensure t
    :bind ( ("M-i" . change-inner)
            ("M-o" . change-outer)))
#+END_SRC

*** Expand region
Homepage: [[https://github.com/emacsmirror/change-inner]]

Marks in a syntax aware manner, starting with the current word.
Keep pressing space to expand the region.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ( ("C-M-SPC" . er/expand-region)))
#+END_SRC

*** New lines
It can be handy to be able to create new lines above and below
the current one, regardless of cursor position.

#+BEGIN_SRC emacs-lisp
  (defun open-line-below ()
    "Create new line below the current one."
    (interactive)
    (end-of-line)
    (newline)
    (indent-for-tab-command))

  (defun open-line-above ()
    "Create new line above the current one."
    (interactive)
    (beginning-of-line)
    (newline)
    (forward-line -1)
    (indent-for-tab-command))

  (bind-key "<C-return>" 'open-line-above)
  (bind-key "<S-return>" 'open-line-below)
#+END_SRC

This binding joins the current line with the next line regardless
of the current cursor position.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-j" (lambda () (interactive) (join-line -1)))
#+END_SRC

*** Move text
Homepage: [[http://emacswiki.org/emacs/MoveText]]

Makes it possible to move a whole region of text up and down past
existing lines. The region will be indented as well.

#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t
    :bind ( ("<M-up>"   . move-text-up)
            ("<M-down>" . move-text-down)))
#+END_SRC

*** Commenting
Toggle comment on a region of code. If no region is active then toggle
comment on the current line.

#+BEGIN_SRC emacs-lisp
  (defun comment-eclipse ()
        (interactive)
        (let ((start (line-beginning-position))
              (end (line-end-position)))
          (when (region-active-p)
            (setq start (save-excursion
                          (goto-char (region-beginning))
                          (beginning-of-line)
                          (point))
                  end (save-excursion
                        (goto-char (region-end))
                        (end-of-line)
                        (point))))
          (comment-or-uncomment-region start end)))

  (bind-key "M-C-c" 'comment-eclipse)
#+END_SRC

*** Miscellaneous bindings
This will first remove all spaces but one between two words. Next it
will remove that one as well and lastly it will restore the original
spacing.

#+BEGIN_SRC emacs-lisp
  (bind-key "M-SPC" 'cycle-spacing)
#+END_SRC

Why not bind delete to delete?

#+BEGIN_SRC emacs-lisp
  (bind-key "<delete>" 'delete-char)
#+END_SRC

** Navigation
*** Smartparens
Homepage: [[https://github.com/Fuco1/smartparens]]

Use to navigate over and into pairs like parentheses. Also I set
it to automatically create the pair sibling. Lastly quotes inside
quotes will be escaped.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :init
    (progn
      (smartparens-global-mode 1)
      (show-smartparens-global-mode t))
    :config
    (progn
      (setq sp-autoescape-string-quote t))
    :bind
    ( ("<C-M-up>"    . sp-previous-sexp)
      ("<C-M-down>"  . sp-next-sexp)
      ("<C-M-left>"  . sp-backward-up-sexp)
      ("<C-M-right>" . sp-down-sexp)))
#+END_SRC

*** Ace jump mode
Homepage: [[https://github.com/winterTTr/ace-jump-mode]]

This mode will let you jump to any word starting with the
given head character. It even works between visible buffers.

#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind ( ("C-f" . ace-jump-word-mode)))
#+END_SRC

*** Tags
#+BEGIN_SRC emacs-lisp
  (setq tags-file-name "~/TAGS")
#+END_SRC

*** Other
This function will let me go back to the last edited place in the buffer.

 #+BEGIN_SRC emacs-lisp
   (defun goto-last-edit-point ()
    "Sets the cursor on the last edit point."
    (interactive)
    (let ((undos buffer-undo-list))
      (if (listp undos)
          (while (and undos
                      (let ((pos (or (cdr-safe (car undos)) (car undos))))
                        (not (and (integerp pos) (goto-char (abs pos))))))
            (setq undos (cdr undos))))))

   (bind-key "C-c SPC" 'goto-last-edit-point)
 #+END_SRC

Make beginning of line context aware. It will now go back to the
first non white space character on the current line. If pressed again
it will go to the beginning of line and then to the beginning of the buffer.

#+BEGIN_SRC emacs-lisp
  (defun marcus-home ()
    "Move to indentation, beginning of line and beginning of buffer."
    (interactive)
    (if (bolp) (beginning-of-buffer)
      (skip-chars-backward " \t")
      (unless (bolp) (back-to-indentation))))

  (bind-key "C-a" 'marcus-home)
#+END_SRC

Make end of line context aware. It will still go to the end of the line, but if
pressed again the cursor will move to the very end of the buffer.

#+BEGIN_SRC emacs-lisp
  (defun marcus-end ()
    "Move to end of line and end of buffer."
    (interactive)
    (if (eolp) (end-of-buffer)
      (end-of-line)))

  (bind-key "C-e" 'marcus-end)
#+END_SRC

Up and down should move logical lines.

#+BEGIN_SRC emacs-lisp
  (bind-key "<up>" 'previous-logical-line)
  (bind-key "<down>" 'next-logical-line)
#+END_SRC

Go to a specific line in current buffer.

#+BEGIN_SRC emacs-lisp
  (bind-key "M-g" 'goto-line)
#+END_SRC

** Searching
*** Casing
Searches should ignore case. When replacing casing should be
preserved.

#+BEGIN_SRC emacs-lisp
  (setq case-fold-search t)
  (setq case-replace t)
#+END_SRC

*** Isearch
Regexp search should be the normal for isearch. Make it easy to perform
occur while in isearch-mode.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-s" 'isearch-forward-regexp)
  (bind-key "C-r" 'isearch-backward-regexp)

  (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
  (define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)
#+END_SRC

*** Grep
Do not show the grep command in the grep buffer as it takes
so much buffer space.

#+BEGIN_SRC emacs-lisp
  (defun marcus-delete-grep-header ()
    "Hide grep command in grep buffer."
    (save-excursion
      (with-current-buffer grep-last-buffer
        (goto-line 4)
        (end-of-line)
        (narrow-to-region (point) (point-max)))))

  (defadvice grep
    (after marcus-delete-grep-header activate)
    (marcus-delete-grep-header))

  (defadvice rgrep
    (after marcus-delete-grep-header activate)
    (marcus-delete-grep-header))
#+END_SRC

Global ignore list for grep.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "grep"
    '(progn
       (add-to-list 'grep-find-ignored-directories "bin")
       (add-to-list 'grep-find-ignored-files "*.exe")
       (add-to-list 'grep-find-ignored-files "*.doc")
       ))
#+END_SRC

Change this template to make grep run in a different way. I used this to get
rid of an error on Windows where to many processes were spawned by xargs.

#+BEGIN_SRC emacs-lisp
  ;; (setq grep-find-template
  ;;   "find . <X> -type f <F> -print0 | xargs -n 100 -0 -e grep <C> -nH -E <R>")
#+END_SRC

When using next and previous error to brows grep hits, recenter the hit in
the buffer. Lastly, bind grep to something.

#+BEGIN_SRC emacs-lisp
  (add-hook 'next-error-hook 'recenter)
  (bind-key "C-c g" 'rgrep)
#+END_SRC

*** Smartscan
Homepage: [[https://github.com/mickeynp/smart-scan]]

Make smartscan searches and replacing case sensitive.

#+BEGIN_SRC emacs-lisp
  (defadvice smartscan-symbol-goto (around smartscan-symbol-goto)
    (let ((case-fold-search nil))
      ad-do-it))

  (defadvice smartscan-symbol-replace (around smartscan-symbol-replace)
    (let ((case-fold-search nil))
      ad-do-it))
#+END_SRC

Use to search for the next or previous occurrence of the symbol below
the cursor.

#+BEGIN_SRC emacs-lisp
  (use-package smartscan
    :ensure t
    :init
    (progn
      (global-smartscan-mode 1)
      (setq smartscan-symbol-selector "symbol"))
    :bind
    ( ("M-n" . smartscan-symbol-go-forward)
      ("M-p" . smartscan-symbol-go-backward)
      ("M-r" . smartscan-symbol-replace)))
#+END_SRC

** Fuzzy matching
*** Flx ido mode
Homepage: [[https://github.com/lewang/flx]]

Flexible ido mode matching to find files and buffers more quickly.

#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :ensure t
    :init
    (progn
      (ido-mode 1)
      (ido-everywhere 1)
      (flx-ido-mode 1))
    :config
    (progn
      (setq ido-enable-flex-matching t)
      (setq ido-use-faces t)
      (setq ido-use-filename-at-point nil)
      (setq ido-auto-merge-work-directories-length 0)
      (setq ido-use-virtual-buffers nil)))
#+END_SRC

*** Ido verticle mode
Homepage: [[https://github.com/gempesaw/ido-vertical-mode.el]]

Let ido mode list things vertically instead horizontally in the mini buffer.

#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (progn
      (ido-vertical-mode)))
#+END_SRC

*** Smex
Homepage: [[https://github.com/nonsequitur/smex]]

Activate ido mode when looking for and running commands with M-x as well.

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init
    (progn
      (smex-initialize))
    :bind
    ( ("M-x" . smex)))
#+END_SRC

*** Fuzzy
Homepage: [[https://github.com/auto-complete/fuzzy-el]]

#+BEGIN_SRC emacs-lisp
  (use-package fuzzy
    :ensure t)
#+END_SRC

** Completion
*** YaSnippet
Homepage: [[https://github.com/capitaomorte/yasnippet]]

Add snippets for a big number of languages. Press tab to
expand them and shift to move to the next placeholder.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :init
    (progn
      (setq yas/root-directory "~/.emacs.d/snippets")
      (yas/load-directory yas/root-directory)
      (yas-global-mode t)))
#+END_SRC

*** Auto Complete
Homepage: [[https://github.com/auto-complete/auto-complete]]

Shows a list of completions in buffer.

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :diminish auto-complete-mode
    :init
    (progn
      (ac-config-default))
    :config
    (progn
      (setq ac-ignore-case nil)
      (setq ac-auto-start 2)
      (setq ac-delay 0)
      (setq ac-auto-show-menu t)
      (setq ac-use-fuzzy t)
      (ac-set-trigger-key nil)
      (ac-flyspell-workaround))
    :bind
    ( ("C-<tab>" . ac-fuzzy-complete)))

  (defun marcus-ac-python-mode ()
    (setq ac-sources '(ac-source-jedi-direct ac-source-yasnippet ac-source-words-in-buffer)))
  (add-hook 'python-mode-hook 'marcus-ac-python-mode)
#+END_SRC

** Projects
*** Projectile
Homepage: [[https://github.com/bbatsov/projectile]]

Add the possibility to define projects and perform project
specific file, buffer, search and replace operations. It is
possible to filter files and directories in a .projectile file
in the project root.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (progn
      (projectile-global-mode)
      (setq projectile-mode-line
        '(:eval (format " P[%s]" (projectile-project-name)))))
    :bind
    ( ("C-x f" . projectile-find-file)
      ("C-x b" . projectile-switch-to-buffer)
      ("C-x s" . projectile-switch-project)
      ("C-x g" . projectile-grep)
      ("C-x q" . projectile-replace)
      ("C-x t" . projectile-toggle-between-implementation-and-test)))
#+END_SRC

** Windows
*** Full frame
Homepage: [[https://github.com/tomterl/fullframe]]

Open Magit in full frame and restore the previous window
configuration when quitting.

#+BEGIN_SRC emacs-lisp
  (use-package fullframe
    :ensure t
    :init
    (progn
      (fullframe magit-status magit-mode-quit-window t)))
#+END_SRC

*** Browse windows

#+BEGIN_SRC emacs-lisp
  (defun marcus-window-back ()
    (interactive)
    (other-window -1))

  (bind-key "C-." 'other-window)
  (bind-key "C-," 'marcus-window-back)
#+END_SRC

** Instant feedback
*** White space mode
Show trailing spaces and empty lines in the beginning or end of file. Tell me
when lines are longer than 80 characters and show me tabs used for indentation.

#+BEGIN_SRC emacs-lisp
  (global-whitespace-mode t)
  (diminish 'global-whitespace-mode)
  (setq whitespace-line-column 100)
  (setq whitespace-style '(face empty tabs trailing lines-tail))
#+END_SRC

Automatically remove tabs and trailing spaces when saving a file.

#+BEGIN_SRC emacs-lisp
  (defun marcus-sanitize-whitespace ()
    "Converts all tabs to spaces."
    (interactive)
    (delete-trailing-whitespace)
    (untabify (point-min) (point-max)))

  (add-hook 'before-save-hook 'marcus-sanitize-whitespace)
#+END_SRC

*** Flycheck
Homepage: [[https://github.com/flycheck/flycheck]]

This package need back-ends to do the actual analysis. As of now,
I only use this for python and has [[Pylint]] installed.

Run static code analysis in real time in python. The errors are marked in
the buffer. Information about the errors are shown in the mini buffer
when the cursor is above an error.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :init
    (progn
      (setq flycheck-check-syntax-automatically '(idle-change new-line mode-enabled))
      (setq flycheck-idle-change-delay 1)
      (add-hook 'python-mode-hook 'flycheck-mode)
      (add-hook 'coffee-mode-hook 'flycheck-mode)
      (add-hook 'js-mode-hook 'flycheck-mode)
      (add-hook 'yaml-mode-hook 'flycheck-mode)
      (add-hook 'php-mode-hook 'flycheck-mode)))
#+END_SRC

*** Cursor position
Show cursors position in the status bar.

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
#+END_SRC

** File system
*** Delete buffer file
Delete the file of the current buffer and kill the buffer
at the same time.

#+BEGIN_SRC emacs-lisp
  (defun delete-current-buffer-file ()
    "Removes file connected to current buffer and kills buffer."
    (interactive)
    (let ((filename (buffer-file-name))
          (buffer (current-buffer))
          (name (buffer-name)))
      (if (not (and filename (file-exists-p filename)))
          (ido-kill-buffer)
        (when (yes-or-no-p "Are you sure you want to remove this file? ")
          (delete-file filename)
          (kill-buffer buffer)
          (message "File '%s' successfully removed" filename)))))

  (bind-key "C-x C-k" 'delete-current-buffer-file)
#+END_SRC

*** Rename buffer file
Rename the file in the current buffer and reflect the change in the buffer
list as well.

#+BEGIN_SRC emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))

  (bind-key "C-x C-r" 'rename-current-buffer-file)
#+END_SRC

*** Neo tree
Homepage: [[https://github.com/jaypei/emacs-neotree]]

Adds a file tree at the left side of emacs. It should show hidden files and
be 40 characters wide.

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind
    ( ("<f8>" . neotree-show))
    :config
    (progn
      (setq fneo-show-hidden-files t)
      (if (> (display-pixel-width) 1500)
        (setq neo-window-width 60)
        (setq neo-window-width 30))
      (setq projectile-switch-project-action 'neotree-projectile-action)))

  (neotree-show)
#+END_SRC

** Development cycle
*** Python
Bind key to run python package with one key stroke.

#+BEGIN_SRC emacs-lisp
  (defun marcus-run-python-program ()
    (interactive)
    (compile (projectile-project-name)))

  (defun marcus-bind-run-python-program ()
    (bind-key "<f5>" 'marcus-run-python-program))

  (add-hook 'python-mode-hook 'marcus-bind-run-python-program)
#+END_SRC

Run tests automatically when saving a python file.

#+BEGIN_SRC emacs-lisp
  (defun marcus-run-python-tests ()
    (interactive)
    (when (derived-mode-p 'python-mode)
      (compile (concat "cd " (projectile-project-root) " && nosetests -q"))))

  (add-hook 'after-save-hook 'marcus-run-python-tests)
#+END_SRC

*** Compiling
Set the compile command and some related key bindings. Run test automatically
when saving.

#+BEGIN_SRC emacs-lisp

  (bind-key "<f5>" 'compile)
  (bind-key "<f6>" 'recompile)
  (bind-key "<f7>" 'kill-compilation)
  (bind-key "<f9>" 'previous-error)
  (bind-key "<f10>" 'next-error)
#+END_SRC

** Major modes
*** Coffeescript/Javascript
Homepage: [[https://github.com/defunkt/coffee-mode
]]
Add mode for Coffee script and set indentation to two spaces.

#+BEGIN_SRC emacs-lisp
  (use-package coffee-mode
    :ensure t
    :config
    (progn
      (setq coffee-tab-width 2)
      (setq js-indent-level 2)
      (add-to-list 'ac-modes 'coffee-mode)))
#+END_SRC

*** PHP
Homepage: [[https://github.com/ejmr/php-mode]]

Add mode for PHP.

#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t
    :config
    (progn
      (add-to-list 'ac-modes 'php-mode)))

  (eval-after-load "php-mode"
    '(progn
       (define-key php-mode-map (kbd "C-.") nil)
       (define-key php-mode-map (kbd "C-,") nil)))
#+END_SRC

*** Markdown mode
Homepage: [[http://jblevins.org/projects/markdown-mode/]]

Add mode for markdown.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :init
      (progn
        (add-to-list 'ac-modes 'markdown-mode)))
#+END_SRC

*** Yaml mode
Homepage: [[https://github.com/yoshiki/yaml-mode]]

Add mode for yaml files.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :init
    (progn
      (add-to-list 'ac-modes 'yaml-mode)))
#+END_SRC

*** Python
**** Jedi
Homepage: [[https://github.com/tkf/emacs-jedi]]

Context aware completion for Python. It also has a go to definition function and
a way to pop back again.

#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (progn
      (add-hook 'python-mode-hook 'jedi:setup))
    :config
    (progn
      (setq jedi:complete-on-dot t))
    :bind
    ( ("M-." . jedi:goto-definition)
      ("M-," . jedi:goto-definition-pop-marker)))
#+END_SRC

**** Virtualenv Wrapper
Homepage: [[https://github.com/porterjamesj/virtualenvwrapper.el]]

A virtual environment tool.

#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :ensure t
    :init
    (progn
      (venv-initialize-interactive-shells)
      (venv-initialize-eshell)
      (setq venv-location "~/.virtualenvs/")

      (add-hook 'venv-postmkvirtualenv-hook
        (lambda () (shell-command "pip install pylint")))

      (add-hook 'venv-postactivate-hook
        (lambda ()
          (setq jedi:environment-root
            (concat "~/code/pingdom/envs/" venv-current-name))))))
#+END_SRC

** Source control
*** Magit
Homepage: [[https://github.com/magit/magit]]

A nice Git interface for Emacs. Just run status to start.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ( ("C-c s" . magit-status)
      ("C-c b" . magit-blame-mode)))
#+END_SRC

*** Diff HL
Homepage: [[https://github.com/dgutov/diff-hl]]

Highlight uncommitted changes in the left margin of a buffer. It is possible
to revert hunk as well.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :diminish diff-hl-mode
    :init
    (progn
      (global-diff-hl-mode))
    :bind
    ( ("C-c r" . diff-hl-revert-hunk)))

#+END_SRC

*** Ediff
Make sure Ediff is split with the windows beside each other. It
should also ignore white-space and new-lines.

#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function (quote split-window-horizontally))
  (setq-default ediff-ignore-similar-regions t)
  (bind-key "C-c d" 'ediff-buffers)
#+END_SRC

** Org
*** Initialization
Homepage: [[http://orgmode.org]]

Start org mode in indented mode, so that outlines are easier to
read. Do not wrap lines.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :init
    (progn
      (setq org-startup-indented t)
      (setq org-startup-truncated t)
      (add-to-list 'ac-modes 'org-mode)))

  (eval-after-load "org"
    '(progn
       (define-key org-mode-map (kbd "C-.") nil)
       (define-key org-mode-map (kbd "C-,") nil)))
#+END_SRC

*** Code blocks
Make source code blocks have prettier background colors and fontify code
in them according to mode.

#+BEGIN_SRC emacs-lisp
  (set-face-background 'org-block-begin-line "#eeeee0")
  (set-face-background 'org-block-background "#fefefa")
  (set-face-background 'org-block-end-line "#eeeee0")

  (setq org-src-fontify-natively t)
#+END_SRC

Set code block template shortcuts.

#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
    '(("s" "#+BEGIN_SRC ?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
       ("e" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE" "<example>\n?\n</example>")
       ("q" "#+BEGIN_QUOTE\n?\n#+END_QUOTE" "<quote>\n?\n</quote>")
       ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
       ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
       ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
       ("l" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")
       ("L" "#+LATEX: " "<literal style=\"latex\">?</literal>")
       ("h" "#+BEGIN_HTML\n?\n#+END_HTML" "<literal style=\"html\">\n?\n</literal>")
       ("H" "#+HTML: " "<literal style=\"html\">?</literal>")
       ("a" "#+BEGIN_ASCII\n?\n#+END_ASCII")
       ("A" "#+ASCII: ")
       ("i" "#+INDEX: ?" "#+index: ?")
       ("I" "#+INCLUDE %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC

*** Tasks
Make sure tasks only have two states. A time log should be generated
when a task is set to done. To do items should be counted in sub-trees and
a parent task cannot be done if sub tasks are not.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO" "DOING" "DONE")))
  (setq org-todo-keyword-faces
    '(("TODO" . "red") ("DOING" . "Orange") ("DONE" . "dark green")))
  (setq org-log-done "time")
  (setq org-hierarchical-todo-statistics nil)
  (setq org-enforce-todo-dependencies t)
  (setq org-src-window-setup 'current-window)
#+END_SRC

*** Capture
Captured tasks should be but in notes.org in the home directory.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
    (lambda ()
      (setq org-default-notes-file "~/notes.org")
      (define-key global-map "\C-cc" 'org-capture)))
#+END_SRC

Define templates:

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
    '(("r" "Refactor me" entry
        (file+headline org-default-notes-file "Code refactor")
        "* TODO %?\nADDED: %U\nLINK: %l"
        :empty-lines 1)

       ("t" "Add TODO item" entry
         (file+headline org-default-notes-file "Things to do")
         "* TODO %?\nADDED: %U"
         :empty-lines 1)

       ("q" "Add Question" entry
         (file+headline org-default-notes-file "Things to do")
         "* TODO (Q): %??\n(A):\nADDED: %U"
         :empty-lines 1)

       ("n" "Add Note" entry
         (file+headline org-default-notes-file "General notes")
         "* %?\nADDED: %U"
         :empty-lines 1)))
#+END_SRC

** Misc
*** Discover
Homepage: [[https://github.com/mickeynp/discover.el]]
Press ? when in dired mode to get help. Press M-s to get help on isearch switches
and see bindings for C-x r context.

#+BEGIN_SRC emacs-lisp
  (use-package discover
    :ensure t
    :init
    (progn
      (global-discover-mode 1)))
#+END_SRC

*** Spelling
Set language to English and use Aspell as dictionary software. Start spell
checking in text and org mode. Also, start spell checking in source code
comments. Unbind some of the keys in fly-spell mode so that it does not
conflict with global bindings.

#+BEGIN_SRC emacs-lisp
  (setq ispell-dictionary "english")
  (setq ispell-program-name "aspell")

  (add-hook 'text-mode-hook (lambda () (flyspell-mode 1)))
  (add-hook 'org-mode-hook  (lambda () (flyspell-mode 1)))
  (add-hook 'prog-mode-hook (lambda () (flyspell-prog-mode)))

  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mode-map (kbd "C-.") nil)
       (define-key flyspell-mode-map (kbd "C-,") nil)))

  (bind-key "C--" 'flyspell-auto-correct-word)
#+END_SRC

*** Backup
No backup files.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

*** Yes and no
Answer y/n on questions instead of yes/no.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Bindings
Some left over bindings with no obvious place to be.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-x C-b" 'switch-to-buffer)
  (bind-key "<f12>" 'call-last-kbd-macro)
  (bind-key "C-z" 'undo)
  (bind-key "C-x C-z" 'undo)
#+END_SRC

*** Casing
A utility function.

#+BEGIN_SRC emacs-lisp
  (defun camelize (s)
    "Convert under_score to CamelCase."
    (mapconcat 'identity
      (mapcar
        '(lambda (word) (capitalize (downcase word)))
        (split-string s "_")) ""))
#+END_SRC

*** Eshell
Set eshell prompt to active virtualenv and the current directory.

#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-function
    (lambda ()
      (concat
        venv-current-name
        (propertize " [" 'face `(:foreground "black"))
        (propertize (eshell/pwd) 'face `(:foreground "blue"))
        (propertize "]" 'face `(:foreground "black"))
        (propertize " $" 'face `(:foreground "red"))
        (propertize " " 'face `(:foreground "black")))))

  (setq eshell-highlight-prompt nil)
#+END_SRC

*** Me
Set my personal info.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Marcus Veibäck")
  (setq user-mail-address "sirmar@gmail.com")
#+END_SRC

* Tasks [28/33]
** Things to do
Work to be done that is related to Emacs as such will be added below.
The items is sorted in order of importance.

*** DONE Create task capture templates                            :setting:
CLOSED: [2015-02-25 Wed 22:56]
*** DOING Establish smart scan in my work flow                   :practice:
*** DOING Establish ace jump in my work flow                     :practice:
*** TODO Change theme to something nice                           :setting:
*** TODO Learn debugging and make customizations for that         :explore:
** Archive
A place to save old done tasks. Maybe a fun read in a distant
future.

*** DONE Run tests easy.                                              :add:
CLOSED: [2015-02-24 Tue 22:33]
*** DONE Go to test file from source file                             :add:
CLOSED: [2015-02-24 Tue 22:33]
*** DONE Add DOING state to tasks.                                :setting:
CLOSED: [2015-01-29 Thu 22:02]
*** DONE Do stuff in :config instead of :init for use-package     :setting:
CLOSED: [2015-01-31 Sat 21:30]
*** DONE Smartscan commands should be case sensitive.                 :add:
CLOSED: [2015-02-01 Sun 17:00]
*** DONE Use and bind Smartscan rename global and in function.    :setting:
CLOSED: [2015-02-01 Sun 17:09]
*** DONE Yellow color on DOING tasks.                             :setting:
CLOSED: [2015-02-05 Thu 16:10]
*** DONE Add diff hl mode                                         :package:
CLOSED: [2015-01-28 Wed 20:30]
*** DONE Flyspell overwrite C-. and C-,                               :bug:
CLOSED: [2015-01-28 Wed 19:56]
*** DONE Ediff should ignore white space                          :setting:
CLOSED: [2015-01-28 Wed 17:50]
*** DONE Write descriptions in configuration sections                 :doc:
CLOSED: [2015-01-28 Wed 17:05]
*** DONE Context aware comment region                                 :add:
CLOSED: [2015-01-28 Wed 14:54]
*** DONE Comment binding that fits python mode                    :setting:
CLOSED: [2015-01-28 Wed 14:54]
*** DONE Check why src block background does not work                 :bug:
CLOSED: [2015-01-28 Wed 11:37]
*** DONE Diminish modes with use-package                          :setting:
CLOSED: [2015-01-28 Wed 11:05]
*** DONE Load org with use-package                                :setting:
CLOSED: [2015-01-28 Wed 11:05]
*** DONE Link to packages on the internet                             :doc:
CLOSED: [2015-01-28 Wed 09:43]
*** DONE Write the dependencies section                               :doc:
CLOSED: [2015-01-27 Tue 22:08]
*** DONE Get spell checking to work                                   :add:
CLOSED: [2015-01-27 Tue 20:18]
*** DONE Replace global key with bind key macro                  :refactor:
CLOSED: [2015-01-27 Tue 19:34]
*** DONE Rewrite configuration using use-package                  :package:
CLOSED: [2015-01-27 Tue 19:27]
*** DONE Remove cask                                               :remove:
CLOSED: [2015-01-27 Tue 19:26]
*** DONE Create Emacs-lisp source block template                  :setting:
CLOSED: [2015-01-27 Tue 15:44]
*** DONE Write introduction                                           :doc:
CLOSED: [2015-01-27 Tue 14:50]
*** DONE Redo configuration as an org mode file                       :doc:
CLOSED: [2015-01-27 Tue 14:50]
*** DONE Change C-w to remove line when no region                     :add:
CLOSED: [2015-01-27 Tue 14:50]
*** DONE Remove M-k binding                                        :remove:
CLOSED: [2015-01-27 Tue 14:50]
